using System;

public class Class1 {
?/*Компьтерный практикум № 3
 * ФИ - 43, Дикий В.
 *
 * */
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Diagnostics;

namespace Crypta3
{
    class Program {
		static void Main(string[] args) {
			//string v
			string v4d
			// string v15d
			string v13d
			//string v8d
			int[] test1 = new int[25];
			test1[24] = 1;
			int[] test2 = new int[26];
			test2[25] = 1;
			int[] test3 = new int[27];
			test3[26] = 1;

			/*int[] test1 = new int[30];
            test1[29] = 1;
            int[] test2 = new int[31];
            test2[30] = 1;
            int[] test3 = new int[32];
            test3[31] = 1;*/

			/*   int[] z = StringToInt(v4d, 2048); // легкий вариант
               //int[] z = StringToInt(v4, 2048);
               //Print(z);
               Stopwatch stopwatch1 = new Stopwatch();
               stopwatch1.Start();
               Console.WriteLine("Begin first task");
               FindRL2(z, test2, 230, 75); // 221, 55
               stopwatch1.Stop();
               Console.WriteLine("Время : " + stopwatch1.Elapsed);
               Console.WriteLine();*/

			/*
            int[] x1 = StringToInt("0001110100011010111010100", 25);
            int[] x2 = StringToInt("0101010100011010111010100", 25);
            int[] y = StringToInt("00000111000010010011100111", 26);
            int[] s = StringToInt("010101111010111100010011110", 27);
            Print(L25N(x1, 240));
            Print(L26N(y, 240));
            Print(L27N(s, 240));
            Print(GeffeLight(x1, y, s, 2048));
            Console.WriteLine(v13d);*/
			/*  Parallel.Invoke(() =>
              {
                  Stopwatch stopwatch1 = new Stopwatch();
                  stopwatch1.Start();
                  Console.WriteLine("Begin first task");
                  FindL3(x1, y, test3, z);
                  //FindRL1(z, test1, 221, 60); // 221, 55
                  stopwatch1.Stop();
                  Console.WriteLine("Время : " + stopwatch1.Elapsed);
                  Console.WriteLine();
              },
              () =>
              {
                  Stopwatch stopwatch2 = new Stopwatch();
                  stopwatch2.Start();
                  Console.WriteLine("Begin second task");
                    FindL3(x2, y, test3, z);
                    //FindRL2(z, test2, 229, 73);
                  stopwatch2.Stop();
                  Console.WriteLine("Время : " + stopwatch2.Elapsed);
                  Console.WriteLine();
              }
               );
              Console.WriteLine("Comleted Parallel Invoke");*/

			/*  int[] x = StringToInt("0001100111011110101100001", 25); // вот они 
              int[] y = StringToInt("00000011100010001100001101", 26);//все начальные состояние
              int[] s = StringToInt("101100011100011100001111000", 27); // для простого варианта*/
			/* int[] res = GeffeLight(x1, y, s, 2048);
             Print(res);*/

			/*Stopwatch stopwatch1 = new Stopwatch();
            stopwatch1.Start();
            Console.WriteLine("Begin first task");
            FindL3(x, y, test3, z);
            stopwatch1.Stop();
            Console.WriteLine("Время : " + stopwatch1.Elapsed);*/
			Console.WriteLine();
			Console.ReadLine();
		}
		//-----------------------------------------------------------------------------------------------------
		public static int[] StringToInt(string x, int N) {
			string a = x;
			int[] result = new int[N];
			for (int i = 0; i < N; i++)
				result[i] = a[i] - 48;
			return result;
		}
		//-----------------------------------------------------------------------------------------------------
		public static int[] ShiftLeft(int[] s) {
			int[] x = s;
			for (int i = 0; i < x.Length - 1; i++) {
				x[i] = x[i + 1];
			}
			x[x.Length - 1] = 0;
			return x;
		}
		//-----------------------------------------------------------------------------------------------------
		public static void Print(int[] x) {
			for (int i = 0; i < x.Length; i++)
				Console.Write(x[i]);
			Console.WriteLine();
		}
		//-----------------------------------------------------------------------------------------------------
		public static int[] Add(int[] x, int a) // добавляет в массив
		{
			int[] c = new int[x.Length + 1];
			for (int i = 0; i < x.Length; i++)
				c[i] = x[i];
			c[x.Length] = a;
			return c;

		}
		//-----------------------------------------------------------------------------------------------------
		/* public static int[] L1(int[] x)
         {
             int[] c = x;
             int temp = c[0] ^ c[1] ^ c[4] ^ c[6];
             c = ShiftLeft(c);
             c[29] = temp;
             return c;
         }*/
		//-----------------------------------------------------------------------------------------------------
		/*  public static int[] L1n(int[] x, int n)
          {
              int[] test1 = x;
              for (int i = 0; i < n; i++)
              {
                  test1 = L1(test1);
              }
              Print(test1);
              Console.WriteLine(1);
              return test1;
          }*/
		public static int[] L30N(int[] x, int N) // генерирует последовательность длины N по полиному степени 30
		{
			int n = x.Length;
			int[] temp = new int[n];
			Array.Copy(x, temp, n);
			int[] result = new int[N];
			for (int i = 0; i < n; i++)
				result[i] = temp[i];
			for (int i = 0; i < N - 30; i++) {
				result[i + 30] = result[i] ^ result[i + 1] ^ result[i + 4] ^ result[i + 6];
			}
			return result;
		}
		//-----------------------------------------------------------------------------------------------------
		public static int[] L31N(int[] x, int N) // генерирует последовательность длины N по полиному степени 31
		{
			int n = x.Length;
			int[] temp = new int[n];
			Array.Copy(x, temp, n);
			int[] result = new int[N];
			for (int i = 0; i < n; i++)
				result[i] = temp[i];
			for (int i = 0; i < N - 31; i++) {
				result[i + 31] = result[i] ^ result[i + 3];
			}
			return result;
		}
		//-----------------------------------------------------------------------------------------------------
		public static int[] L32N(int[] x, int N) // генерирует последовательность длины N по полиному степени 32
		{
			int n = x.Length;
			int[] temp = new int[n];
			Array.Copy(x, temp, n);
			int[] result = new int[N];
			for (int i = 0; i < n; i++)
				result[i] = temp[i];
			for (int i = 0; i < N - 32; i++) {
				result[i + 32] = result[i] ^ result[i + 1] ^ result[i + 2] ^ result[i + 3] ^ result[i + 5] ^ result[i + 7];
			}
			return result;
		}
		//-----------------------------------------------------------------------------------------------------
		public static int[] L25N(int[] x, int N) // надо ускорить(вроде норм)?
		{
			int n = x.Length;
			int[] temp = new int[n];
			Array.Copy(x, temp, n);
			int[] result = new int[N];
			for (int i = 0; i < n; i++)
				result[i] = temp[i];
			for (int i = 0; i < N - 25; i++) {
				result[i + 25] = result[i] ^ result[i + 3];
			}
			return result;
		}
		//-----------------------------------------------------------------------------------------------------
		public static int[] L26N(int[] x, int N) {
			int n = x.Length;
			int[] temp = new int[n];
			Array.Copy(x, temp, n);
			int[] result = new int[N];
			for (int i = 0; i < n; i++) {
				result[i] = temp[i];
			}
			for (int i = 0; i < N - 26; i++) {
				result[i + 26] = result[i] ^ result[i + 1] ^ result[i + 2] ^ result[i + 6];
			}
			return result;
		}
		//-----------------------------------------------------------------------------------------------------
		public static int[] L27N(int[] x, int N) {
			int n = x.Length;
			int[] temp = new int[n];
			Array.Copy(x, temp, n);
			int[] result = new int[N];
			for (int i = 0; i < n; i++) {
				result[i] = temp[i];
			}
			for (int i = 0; i < N - 27; i++) {
				result[i + 27] = result[i] ^ result[i + 1] ^ result[i + 2] ^ result[i + 5];
			}
			return result;
		}
		//-----------------------------------------------------------------------------------------------------
		public static int[] GeffeHard(int[] l1, int[] l2, int[] l3, int N) {
			int[] z = new int[N];
			int[] x = L30N(l1, N);
			int[] y = L31N(l2, N);
			int[] s = L32N(l3, N);
			for (int i = 0; i < N; i++) {
				z[i] = (s[i] & x[i]) ^ ((1 ^ s[i]) & y[i]);
			}
			return z;
		}
		//-----------------------------------------------------------------------------------------------------
		public static int[] GeffeLight(int[] l1, int[] l2, int[] l3, int N) {
			int[] z = new int[N];
			int[] x = L25N(l1, N);
			int[] y = L26N(l2, N);
			int[] s = L27N(l3, N);
			for (int i = 0; i < N; i++) {
				z[i] = (s[i] & x[i]) ^ ((1 ^ s[i]) & y[i]);
			}
			return z;
		}
		//-----------------------------------------------------------------------------------------------------
		/*  public static int[] L2(int[] y)
          {
              int[] c = y;
              int temp = c[0] ^ c[3];
              c = ShiftLeft(c);
              c[30] = temp;
              return c;
          }*/
		//-----------------------------------------------------------------------------------------------------
		public static int[] L25(int[] x) {
			int[] c = x;
			int temp = c[0] ^ c[3];
			c = ShiftLeft(c);
			c[24] = temp;
			return c;
		}
		//-----------------------------------------------------------------------------------------------------
		public static int[] L27(int[] x) {
			int[] c = x;
			int temp = c[0] ^ c[1] ^ c[2] ^ c[5];
			c = ShiftLeft(c);
			c[26] = temp;
			return c;
		}
		//-----------------------------------------------------------------------------------------------------
		public static int[] L27nn(int[] x, int n) {
			int[] test3 = x;
			for (int i = 0; i < n; i++) {
				test3 = L27(test3);
			}
			Print(test3);
			Console.WriteLine(27);
			return test3;
		}
		//-----------------------------------------------------------------------------------------------------
		public static int[] L26(int[] x) {
			int[] c = x;
			int temp = c[0] ^ c[1] ^ c[2] ^ c[6];
			c = ShiftLeft(c);
			c[25] = temp;
			return c;
		}
		//-----------------------------------------------------------------------------------------------------
		public static int[] L26nn(int[] x, int n) {
			int[] test2 = x;
			for (int i = 0; i < n; i++) {
				test2 = L26(test2);
			}
			Print(test2);
			Console.WriteLine(26);
			return test2;
		}
		//-----------------------------------------------------------------------------------------------------
		public static int[] L25nn(int[] x, int n) {
			int[] test1 = x;
			for (int i = 0; i < n; i++) {
				test1 = L25(test1);
			}
			Print(test1);
			Console.WriteLine(25);
			return test1;
		}
		//-----------------------------------------------------------------------------------------------------
		/*public static int[] L2n(int[] x, int n)
        {
            int[] test2 = x;
            for (int i = 0; i < n; i++)
            {
                test2 = L2(test2);
            }
            Print(test2);
            Console.WriteLine(2);
            return test2;
        }*/
		//-----------------------------------------------------------------------------------------------------
		/* public static int[] L3(int[] s)
         {
             int[] c = s;
             int temp = s[0] ^ s[1] ^ s[2] ^ s[3] ^ s[5] ^ s[7];
             c = ShiftLeft(c);
             c[31] = temp;
             return c;
         }*/
		//-----------------------------------------------------------------------------------------------------
		/* public static int[] L3n(int[] x, uint n)
         {
             int[] test3 = x;
             for (uint i = 0; i < n; i++)
             {
                 test3 = L3(test3);
             }
             Print(test3);
             Console.WriteLine(3);
             return test3;
         }*/
		//-----------------------------------------------------------------------------------------------------
		public static int[] Generate(int[] x) // добавляет единицу(или создает следующий вектор)
		{
			int[] temp = x;
			for (int i = temp.Length - 1; i >= 0; i--) {
				if (temp[i] == 1) {
					temp[i] = 0;
					continue;
				}
				if (temp[i] == 0) {
					temp[i] = 1;
					break;
				}
			}
			return temp;
		}
		//-----------------------------------------------------------------------------------------------------
		public static void GenerateAllSequence(int[] x) // просто выводит на экран все
		{
			int[] temp = x;
			for (uint i = 0; i < 31; i++) {
				Print(temp);
				temp = Generate(temp);
			}
		}
		//-----------------------------------------------------------------------------------------------------
		public static int R(int[] a, int[] b) {
			int x = 0;
			for (int i = 0; i < a.Length; i++) {
				x += a[i] ^ b[i];
			}
			return x;
		}
		//-----------------------------------------------------------------------------------------------------
		public static void FindRL1(int[] z, int[] a, int N, int C) {
			int[] temp = new int[a.Length];
			Array.Copy(a, temp, a.Length);
			int R1;
			int p = 0;
			int[] v221 = new int[N];
			for (int i = 0; i < N; i++)
				v221[i] = z[i];
			/*int[] l30;*/
			int[] l25;
			for (int i = 0; i < /*1073741823*/33554431; i++) {
				R1 = 0;
				/* l30 = L30N(temp, N);*/
				l25 = L25N(temp, N);
				/*R1 = R(l30, v221);*/
				R1 = R(l25, v221);
				if (R1 < C) {
					//Print(l25);
					Console.Write("Итерация : " + i + " L25 : ");
					Print(temp);
					p += 1;
				}
				temp = Generate(temp);
				//Print(temp);
			}
			Console.WriteLine("Возможных состояний : " + p);
		}
		//-----------------------------------------------------------------------------------------------------
		public static void FindRL2(int[] z, int[] a, int N, int C) {
			///string v = x; // перезаписуем строку
			int[] temp = new int[a.Length];
			Array.Copy(a, temp, a.Length);
			//int[] temp = a; // 
			int R2;
			int p = 0;
			//int[][] statements = null;
			int[] v229 = new int[N];
			for (int i = 0; i < N; i++) {
				v229[i] = z[i];
			}
			/* int[] l31;*/
			int[] l26;
			for (int i = 0; i < /*2147483647*/67108863; i++) {
				R2 = 0;
				/* l31 = L31N(temp, N);*/
				l26 = L26N(temp, N);
				/*R2 = R(l31, v229);*/
				R2 = R(l26, v229);
				if (R2 < C) {
					//Print(l26);
					Console.Write("Итерация : " + i + " L26 : ");
					Print(temp);
					p += 1;
				}
				temp = Generate(temp);
				//Print(temp);
			}
			Console.WriteLine("Возможных состояний : " + p);
		}
		//-----------------------------------------------------------------------------------------------------
		public static void FindL3(int[] l1, int[] l2, int[] l3, int[] z1) {
			int N = 240;
			//string temp4 = z1;
			int[] z = new int[N];
			for (int i = 0; i < N; i++) {
				z[i] = z1[i];
			}
			int[] temp1 = new int[l1.Length];
			int[] temp2 = new int[l2.Length];
			int[] temp3 = new int[l3.Length];
			Array.Copy(l1, temp1, l1.Length);
			Array.Copy(l2, temp2, l2.Length);
			Array.Copy(l3, temp3, l3.Length);
			/*int[] x = L30N(temp1, N);*/
			int[] x = L25N(temp1, N);
			/* int[] y = L31N(temp2, N);*/
			int[] y = L26N(temp2, N);
			int[] s;
			int p = 0;
			for (uint i = 0; i < /*4294967295*/134217727; i++) {
				s = L27N(temp3, N);
				if (Check(x, y, s, z) == true) {
					//Print(l1);
					Print(l1);
					Print(temp3);
					p += 1;
				}
				temp3 = Generate(temp3);
			}
			Console.WriteLine(p);
		}
		//-----------------------------------------------------------------------------------------------------
		public static bool Check(int[] x, int[] y, int[] s, int[] z) {
			int n = x.Length;
			for (int i = 0; i < n; i++) {
				if (s[i] == 1) {
					if (z[i] != x[i]) {
						return false;
					} else continue;
				}
				if (s[i] == 0) {
					if (z[i] != y[i]) {
						return false;
					} else continue;
				}
			}
			return true;
		}
	}
}


